<?xml version="1.0"?>
<launch>
  <!-- Turtlebot2i -->
  <arg name="base"              default="$(env TURTLEBOT_BASE)"         doc="mobile base type [kobuki]"/>
  <arg name="stacks"            default="$(env TURTLEBOT_STACKS)"       doc="stack type displayed in visualisation/simulation [interbotix]"/>
  <arg name="3d_sensor"         default="$(env TURTLEBOT_3D_SENSOR)"    doc="3d sensor types [zr300, astra]"/>
  <arg name="simulation"        default="$(env TURTLEBOT_SIMULATION)"   doc="set flags to indicate this turtle is run in simulation mode."/>
  <arg name="serialport"        default="$(env TURTLEBOT_SERIAL_PORT)"  doc="used by create to configure the port it is connected on [/dev/ttyUSB0, /dev/ttyS0]"/>

  <!--Robot-->
  <!--Description-->
  <arg name="urdf_file" default="$(find xacro)/xacro --inorder '$(find turtlebot2i_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" />
  <param name="robot_description" command="$(arg urdf_file)" />

  <!-- important generally, but specifically utilised by the current app manager -->  
  <param name="robot/name" value="$(optenv ROBOT turtlebot)"/>
  <param name="robot/type" value="turtlebot"/>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="5.0" />
  </node>
  <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" >
    <rosparam command="load" file="$(find turtlebot2i_bringup)/param/$(arg base)/diagnostics.yaml" />
  </node>

  <!--Mobile Base-->
  <include file="$(find turtlebot2i_bringup)/launch/includes/$(arg base)/mobile_base.launch.xml">
    <arg name="serialport" value="$(arg serialport)" />
  </include>

  <!--rplidar-->
  <arg name="serial_port" default="/dev/ttyUSB0"/>
  <arg name="frame_id" default="lidar/scan"/>
  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
  <param name="serial_port"         type="string" value="$(arg serial_port)"/>  
  <param name="serial_baudrate"     type="int"    value="256000"/><!--A3 -->
  <param name="frame_id"            type="string" value="$(arg frame_id)"/>
  <param name="inverted"            type="bool"   value="false"/>
  <param name="angle_compensate"    type="bool"   value="true"/>
  <param name="scan_mode"           type="string" value="Express"/>
  <remap from="/scan" to="/lidar/scan"/>
  </node>


  <!--3d sensor -->


  <!-- "camera" should uniquely identify the device. All topics are pushed down
       into the "camera" namespace, and it is prepended to tf frame ids. -->
  <arg name="camera"      default="camera"/>
  <arg name="publish_tf"  default="false"/>

  <!-- Factory-calibrated depth registration -->
  <arg name="depth_registration"              default="true"/>
  <arg     if="$(arg depth_registration)" name="depth" value="depth_registered" />
  <arg unless="$(arg depth_registration)" name="depth" value="depth" />

  <!-- Processing Modules -->
  <arg name="rgb_processing"                  default="true"/>
  <arg name="ir_processing"                   default="true"/>
  <arg name="depth_processing"                default="true"/>
  <arg name="depth_registered_processing"     default="true"/>
  <arg name="disparity_processing"            default="true"/>
  <arg name="disparity_registered_processing" default="true"/>
  <arg name="scan_processing"                 default="true"/>

  <!-- Worker threads for the nodelet manager -->
  <arg name="num_worker_threads" default="4" />

  <!-- Laserscan topic -->
  <arg name="scan_topic" default="scan"/>

  <include file="$(find turtlebot2i_bringup)/launch/includes/3dsensor/$(arg 3d_sensor).launch.xml">
    <arg name="camera"                          value="$(arg camera)"/>
    <arg name="publish_tf"                      value="$(arg publish_tf)"/>
    <arg name="depth_registration"              value="$(arg depth_registration)"/>
    <arg name="num_worker_threads"              value="$(arg num_worker_threads)" />

    <!-- Processing Modules -->
    <arg name="rgb_processing"                  value="$(arg rgb_processing)"/>
    <arg name="ir_processing"                   value="$(arg ir_processing)"/>
    <arg name="depth_processing"                value="$(arg depth_processing)"/>
    <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)"/>
    <arg name="disparity_processing"            value="$(arg disparity_processing)"/>
    <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)"/>
  </include>

   <!--                        Laserscan 
     This uses lazy subscribing, so will not activate until scan is requested.
   -->
  <group if="$(arg scan_processing)">
    <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet $(arg camera)/$(arg camera)_nodelet_manager">
      <!-- Pixel rows to use to generate the laserscan. For each column, the scan will
           return the minimum value for those pixels centered vertically in the image. -->
      <param name="scan_height" value="10"/>
      <param name="output_frame_id" value="/$(arg camera)_depth_frame"/>
      <param name="range_min" value="0.45"/>
      <remap from="image" to="$(arg camera)/$(arg depth)/image_raw"/>
      <remap from="scan" to="$(arg scan_topic)"/>

      <!-- Somehow topics here get prefixed by "$(arg camera)" when not inside an app namespace,
           so in this case "$(arg scan_topic)" must provide an absolute topic name (issue #88).
           Probably is a bug in the nodelet manager: https://github.com/ros/nodelet_core/issues/7 -->
      <remap from="$(arg camera)/image" to="$(arg camera)/$(arg depth)/image_raw"/>
      <remap from="$(arg camera)/scan" to="$(arg scan_topic)"/>
    </node>
  </group>


   <!-- DUAL 3D Sensor(s) -->


  <arg name="3d_sensor2" default="$(optenv TURTLEBOT_3D_SENSOR2 None)" />

  <include if="$(eval arg('3d_sensor') != 'zr300')" file="$(find turtlebot2i_bringup)/launch/3dsensor.launch"/>
  <include if="$(eval arg('3d_sensor') == 'zr300' and arg('3d_sensor2') == 'sr300')" file="$(find turtlebot2i_bringup)/launch/includes/3dsensor/zr300_sr300.launch.xml"/>

<!--
	<include if="$(eval arg('3d_sensor') != 'zr300' and arg('3d_sensor2') != 'None')" file="$(find turtlebot2i_bringup)/launch/includes/3dsensor/$(arg 3d_sensor2).launch.xml">
    <arg name="launch_camera" value="false"/>
    <arg name="manager" value="/camera/camera_nodelet_manager"/>
  </include>
-->

  <include if="$(eval arg('3d_sensor') != 'zr300' and arg('3d_sensor2') != 'None')" file="$(find realsense2_camera)/launch/rs_rgbd.launch">
    <arg name="camera_dual"			              value="camera_sr300"/>
    <arg name="enable_pointcloud"         value="false"/>
    <arg name="enable_fisheye"            value="false"/>
    <arg name="enable_gyro"               value="false"/>
    <arg name="enable_accel"              value="false"/>
    <arg name="enable_infra1"             value="false"/>
    <arg name="enable_infra2"             value="false"/>
    <arg name="enable_depth"              value="true"/>
    <arg name="align_depth"		            value="false"/>
    <arg name="publish_tf"		            value="false"/>
  </include>

</launch>


